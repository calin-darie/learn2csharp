// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Caesar.Specs.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class CaesarMinusFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "CaesarMinus.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "CaesarMinus", "\tIn order to encrypt the content of my files\r\n\tAs a secretive man\r\n\tI want to use" +
                    " an encryption algorithm which decrements every letter of the string by one", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "CaesarMinus")))
            {
                Caesar.Specs.Features.CaesarMinusFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void EncryptionOfText(string text, string encrypted, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "encrypt"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Encryption of text", @__tags);
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given(string.Format("The file contains {0}", text), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.When("I encrypt with CaesarMinus", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
 testRunner.Then(string.Format("the text should be {0}", encrypted), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Encryption of text: ")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CaesarMinus")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("encrypt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:text", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:encrypted", "Error: input is null or empty")]
        public virtual void EncryptionOfText_()
        {
            this.EncryptionOfText("", "Error: input is null or empty", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Encryption of text: abcdef")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CaesarMinus")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("encrypt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "abcdef")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:text", "abcdef")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:encrypted", "`abcde")]
        public virtual void EncryptionOfText_Abcdef()
        {
            this.EncryptionOfText("abcdef", "`abcde", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Encryption of text: \"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^" +
            "_`abcdefghijklmnopqrstuvwxyz{")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CaesarMinus")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("encrypt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqr" +
            "stuvwxyz{")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:text", "\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqr" +
            "stuvwxyz{")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:encrypted", "!\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopq" +
            "rstuvwxyz")]
        public virtual void EncryptionOfText_0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_Abcdefghijklmnopqrstuvwxyz()
        {
            this.EncryptionOfText("\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqr" +
                    "stuvwxyz{", "!\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopq" +
                    "rstuvwxyz", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Encryption of text: This is a test for encryption. It uses the Caesar Minus algor" +
            "ithm.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CaesarMinus")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("encrypt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "This is a test for encryption. It uses the Caesar Minus algorithm.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:text", "This is a test for encryption. It uses the Caesar Minus algorithm.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:encrypted", "Sghrhr`sdrsenqdmbqxoshnm-HstrdrsgdB`dr`qLhmtr`kfnqhsgl-")]
        public virtual void EncryptionOfText_ThisIsATestForEncryption_ItUsesTheCaesarMinusAlgorithm_()
        {
            this.EncryptionOfText("This is a test for encryption. It uses the Caesar Minus algorithm.", "Sghrhr`sdrsenqdmbqxoshnm-HstrdrsgdB`dr`qLhmtr`kfnqhsgl-", ((string[])(null)));
#line hidden
        }
        
        public virtual void DecryptionOfText(string text, string encrypted, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "decrypt"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Decryption of text", @__tags);
#line 21
this.ScenarioSetup(scenarioInfo);
#line 22
 testRunner.Given(string.Format("The file contains {0}", text), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 23
 testRunner.When("I decrypt with CaesarMinus", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 24
 testRunner.Then(string.Format("the text should be {0}", encrypted), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Decryption of text: ")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CaesarMinus")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("decrypt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:text", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:encrypted", "Error: input is null or empty")]
        public virtual void DecryptionOfText_()
        {
            this.DecryptionOfText("", "Error: input is null or empty", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Decryption of text: `abcde")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CaesarMinus")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("decrypt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "`abcde")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:text", "`abcde")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:encrypted", "abcdef")]
        public virtual void DecryptionOfText_Abcde()
        {
            this.DecryptionOfText("`abcde", "abcdef", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Decryption of text: !\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]" +
            "^_`abcdefghijklmnopqrstuvwxyz")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CaesarMinus")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("decrypt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "!\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopq" +
            "rstuvwxyz")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:text", "!\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopq" +
            "rstuvwxyz")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:encrypted", "\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqr" +
            "stuvwxyz{")]
        public virtual void DecryptionOfText_0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_Abcdefghijklmnopqrstuvwxyz()
        {
            this.DecryptionOfText("!\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopq" +
                    "rstuvwxyz", "\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqr" +
                    "stuvwxyz{", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Decryption of text: Sghrhr`sdrsenqdmbqxoshnm-HstrdrsgdB`dr`qLhmtr`kfnq" +
            "hsgl-")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CaesarMinus")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("decrypt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Sghrhr`sdrsenqdmbqxoshnm-HstrdrsgdB`dr`qLhmtr`kfnqhsgl-")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:text", "Sghrhr`sdrsenqdmbqxoshnm-HstrdrsgdB`dr`qLhmtr`kfnqhsgl-")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:encrypted", "This is a test for encryption. It uses the Caesar Minus algorithm.")]
        public virtual void DecryptionOfText_SghrHrSdrsEnqDmbqxoshnm_HsTrdrSgdBDrQLhmtrKfnqhsgl_()
        {
            this.DecryptionOfText("Sghrhr`sdrsenqdmbqxoshnm-HstrdrsgdB`dr`qLhmtr`kfnqhsgl-", "This is a test for encryption. It uses the Caesar Minus algorithm.", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Encryption of multi-line text")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CaesarMinus")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("encrypt")]
        public virtual void EncryptionOfMulti_LineText()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Encryption of multi-line text", new string[] {
                        "encrypt"});
#line 35
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 36
 testRunner.Given("The file contains:", @"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus vitae gravida purus. Nunc 
quis nunc tellus. Cras laoreet congue urna, sed bibendum felis tincidunt vel. Donec ut justo sapien. Maecenas vel ligula 
odio. Suspendisse enim diam, malesuada ut velit nec, feugiat egestas turpis. Fusce non facilisis nibh, eu tincidunt mi. 

Aenean convallis odio euismod, dapibus urna tempor, pretium libero. Praesent pulvinar, nibh et volutpat varius, felis sem 
ultricies nibh, sit amet rhoncus elit lorem sit amet leo. Fusce sed porttitor ligula. Pellentesque ut dictum diam. 

Maecenas accumsan ligula arcu, nec bibendum risus finibus sed.", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 47
 testRunner.When("I encrypt with CaesarMinus", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 48
 testRunner.Then(@"the text should be Knqdlhortlcnknqrhs`lds+bnmrdbsdstq`chohrbhmfdkhs-Uhu`ltruhs`dfq`uhc`otqtr-Mtmb	pthrmtmbsdkktr-Bq`rk`nqddsbnmftdtqm`+rdcahadmctledkhrshmbhctmsudk-Cnmdbtsitrsnr`ohdm-L`dbdm`rudkkhftk`	nchn-Rtrodmchrrddmhlch`l+l`kdrt`c`tsudkhsmdb+edtfh`sdfdrs`rstqohr-Etrbdmnme`bhkhrhrmhag+dtshmbhctmslh-		@dmd`mbnmu`kkhrnchndthrlnc+c`ohatrtqm`sdlonq+oqdshtlkhadqn-Oq`drdmsotkuhm`q+mhagdsunktso`su`qhtr+edkhrrdl	tksqhbhdrmhag+rhs`ldsqgnmbtrdkhsknqdlrhs`ldskdn-Etrbdrdconqsshsnqkhftk`-Odkkdmsdrptdtschbstlch`l-		L`dbdm`r`bbtlr`mkhftk``qbt+mdbahadmctlqhrtrehmhatrrdc-", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Decryption of multi-line text")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CaesarMinus")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("decrypt")]
        public virtual void DecryptionOfMulti_LineText()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Decryption of multi-line text", new string[] {
                        "decrypt"});
#line 51
this.ScenarioSetup(scenarioInfo);
#line 52
 testRunner.Given(@"The file contains Knrs		Cdrnk`sd`mcknmd	@kkmhfgsknmfnmsgdk`jd	Vgdqdenfsq`hkr`mclhrsbqddor+	Sgdvghrskdne`an`s	B`kkr`mcbqhdrtmdmchmfkx+	Khjdrnldknrsbghkc	Hmsd`qr`mcsqntakd	Gtmshmfsgdg`qanq&raqd`rs	@mcsgdg`qanq&rdxdr-		B`qkR`mcatqf+0767,0856", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 53
 testRunner.When("I decrypt with CaesarMinus", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 54
 testRunner.Then("the text should be:", @"Lost

Desolate and lone
All night long on the lake
Where fog trails and mist creeps,
The whistle of a boat
Calls and cries unendingly,
Like some lost child
In tears and trouble
Hunting the harbor's breast
And the harbor's eyes.

Carl Sandburg, 1878 - 1967", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
