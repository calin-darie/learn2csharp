// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Caesar.Specs.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class CaesarPlusFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "CaesarPlus.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "CaesarPlus", "\tIn order to encrypt the content of my files\r\n\tAs a secretive man\r\n\tI want to use" +
                    " an encryption algorithm which increments every letter of the string by one", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "CaesarPlus")))
            {
                Caesar.Specs.Features.CaesarPlusFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void EncryptionOfText(string inputPath, string text, string outputPath, string encrypted, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "encrypt"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Encryption of text", @__tags);
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given(string.Format("A file is located at {0}", inputPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.And(string.Format("the file contains {0}", text), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
 testRunner.When(string.Format("encrypted with CaesarPlus to {0}", outputPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 11
 testRunner.Then(string.Format("the text in the {0} should be {1}", outputPath, encrypted), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Encryption of text: C:\\Temp\\CaesarTests\\Encrypt\\emptyInputTest.txt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CaesarPlus")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("encrypt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "C:\\Temp\\CaesarTests\\Encrypt\\emptyInputTest.txt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:inputPath", "C:\\Temp\\CaesarTests\\Encrypt\\emptyInputTest.txt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:text", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:outputPath", "C:\\Temp\\CaesarTests\\Encrypt\\emptyOutputTest.txt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:encrypted", "Error: input is null or empty")]
        public virtual void EncryptionOfText_CTempCaesarTestsEncryptEmptyInputTest_Txt()
        {
            this.EncryptionOfText("C:\\Temp\\CaesarTests\\Encrypt\\emptyInputTest.txt", "", "C:\\Temp\\CaesarTests\\Encrypt\\emptyOutputTest.txt", "Error: input is null or empty", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Encryption of text: C:\\Temp\\CaesarTests\\Encrypt\\exampleInputTest.txt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CaesarPlus")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("encrypt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "C:\\Temp\\CaesarTests\\Encrypt\\exampleInputTest.txt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:inputPath", "C:\\Temp\\CaesarTests\\Encrypt\\exampleInputTest.txt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:text", "This is a test for encryption. It uses the Caesar Plus algorithm!")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:outputPath", "C:\\Temp\\CaesarTests\\Encrypt\\exampleOutputTest.txt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:encrypted", "Uijt!jt!b!uftu!gps!fodszqujpo/!Ju!vtft!uif!Dbftbs!Qmvt!bmhpsjuin\"")]
        public virtual void EncryptionOfText_CTempCaesarTestsEncryptExampleInputTest_Txt()
        {
            this.EncryptionOfText("C:\\Temp\\CaesarTests\\Encrypt\\exampleInputTest.txt", "This is a test for encryption. It uses the Caesar Plus algorithm!", "C:\\Temp\\CaesarTests\\Encrypt\\exampleOutputTest.txt", "Uijt!jt!b!uftu!gps!fodszqujpo/!Ju!vtft!uif!Dbftbs!Qmvt!bmhpsjuin\"", ((string[])(null)));
#line hidden
        }
        
        public virtual void DecryptionOfText(string inputPath, string text, string outputPath, string decrypted, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "decrypt"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Decryption of text", @__tags);
#line 19
this.ScenarioSetup(scenarioInfo);
#line 20
 testRunner.Given(string.Format("A file is located at {0}", inputPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 21
 testRunner.And(string.Format("the file contains {0}", text), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 22
 testRunner.When(string.Format("decrypted with CaesarPlus to {0}", outputPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 23
 testRunner.Then(string.Format("the text in the {0} should be {1}", outputPath, decrypted), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Decryption of text: C:\\Temp\\CaesarTests\\Decrypt\\emptyInputTest.txt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CaesarPlus")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("decrypt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "C:\\Temp\\CaesarTests\\Decrypt\\emptyInputTest.txt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:inputPath", "C:\\Temp\\CaesarTests\\Decrypt\\emptyInputTest.txt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:text", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:outputPath", "C:\\Temp\\CaesarTests\\Decrypt\\emptyOutputTest.txt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:decrypted", "Error: input is null or empty")]
        public virtual void DecryptionOfText_CTempCaesarTestsDecryptEmptyInputTest_Txt()
        {
            this.DecryptionOfText("C:\\Temp\\CaesarTests\\Decrypt\\emptyInputTest.txt", "", "C:\\Temp\\CaesarTests\\Decrypt\\emptyOutputTest.txt", "Error: input is null or empty", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Decryption of text: C:\\Temp\\CaesarTests\\Decrypt\\exampleInputTest.txt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CaesarPlus")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("decrypt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "C:\\Temp\\CaesarTests\\Decrypt\\exampleInputTest.txt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:inputPath", "C:\\Temp\\CaesarTests\\Decrypt\\exampleInputTest.txt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:text", "Uijt!jt!b!uftu!gps!efdszqujpo/!Ju!vtft!uif!Dbftbs!Qmvt!bmhpsjuin\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:outputPath", "C:\\Temp\\CaesarTests\\Decrypt\\exampleOutputTest.txt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:decrypted", "This is a test for decryption. It uses the Caesar Plus algorithm!")]
        public virtual void DecryptionOfText_CTempCaesarTestsDecryptExampleInputTest_Txt()
        {
            this.DecryptionOfText("C:\\Temp\\CaesarTests\\Decrypt\\exampleInputTest.txt", "Uijt!jt!b!uftu!gps!efdszqujpo/!Ju!vtft!uif!Dbftbs!Qmvt!bmhpsjuin\"", "C:\\Temp\\CaesarTests\\Decrypt\\exampleOutputTest.txt", "This is a test for decryption. It uses the Caesar Plus algorithm!", ((string[])(null)));
#line hidden
        }
        
        public virtual void EncryptionOfMulti_LineText(string inputPath, string outputPath, string encrypted, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "encrypt"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Encryption of multi-line text", @__tags);
#line 32
this.ScenarioSetup(scenarioInfo);
#line 33
 testRunner.Given(string.Format("A file is located at {0}", inputPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 34
 testRunner.And("the file contains:", @"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus vitae gravida purus. Nunc 
quis nunc tellus. Cras laoreet congue urna, sed bibendum felis tincidunt vel. Donec ut justo sapien. Maecenas vel ligula 
odio. Suspendisse enim diam, malesuada ut velit nec, feugiat egestas turpis. Fusce non facilisis nibh, eu tincidunt mi. 

Aenean convallis odio euismod, dapibus urna tempor, pretium libero. Praesent pulvinar, nibh et volutpat varius, felis sem 
ultricies nibh, sit amet rhoncus elit lorem sit amet leo. Fusce sed porttitor ligula. Pellentesque ut dictum diam. 

Maecenas accumsan ligula arcu, nec bibendum risus finibus sed.", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 45
 testRunner.When(string.Format("encrypted with CaesarPlus to {0}", outputPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 46
 testRunner.Then(string.Format("the text in the {0} should be {1}", outputPath, encrypted), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Encryption of multi-line text: C:\\Temp\\CaesarTests\\Encrypt\\multiLineInputTest.txt" +
            "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CaesarPlus")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("encrypt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "C:\\Temp\\CaesarTests\\Encrypt\\multiLineInputTest.txt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:inputPath", "C:\\Temp\\CaesarTests\\Encrypt\\multiLineInputTest.txt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:outputPath", "C:\\Temp\\CaesarTests\\Encrypt\\multiLineOutputTest.txt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:encrypted", @"Mpsfn!jqtvn!epmps!tju!bnfu-!dpotfdufuvs!bejqjtdjoh!fmju/!Wjwbnvt!wjubf!hsbwjeb!qvsvt/!Ovod!rvjt!ovod!ufmmvt/!Dsbt!mbpsffu!dpohvf!vsob-!tfe!cjcfoevn!gfmjt!ujodjevou!wfm/!Epofd!vu!kvtup!tbqjfo/!Nbfdfobt!wfm!mjhvmb!pejp/!Tvtqfoejttf!fojn!ejbn-!nbmftvbeb!vu!wfmju!ofd-!gfvhjbu!fhftubt!uvsqjt/!Gvtdf!opo!gbdjmjtjt!ojci-!fv!ujodjevou!nj/!Bfofbo!dpowbmmjt!pejp!fvjtnpe-!ebqjcvt!vsob!ufnqps-!qsfujvn!mjcfsp/!Qsbftfou!qvmwjobs-!ojci!fu!wpmvuqbu!wbsjvt-!gfmjt!tfn!vmusjdjft!ojci-!tju!bnfu!sipodvt!fmju!mpsfn!tju!bnfu!mfp/!Gvtdf!tfe!qpsuujups!mjhvmb/!Qfmmfouftrvf!vu!ejduvn!ejbn/!Nbfdfobt!bddvntbo!mjhvmb!bsdv-!ofd!cjcfoevn!sjtvt!gjojcvt!tfe/")]
        public virtual void EncryptionOfMulti_LineText_CTempCaesarTestsEncryptMultiLineInputTest_Txt()
        {
            this.EncryptionOfMulti_LineText("C:\\Temp\\CaesarTests\\Encrypt\\multiLineInputTest.txt", "C:\\Temp\\CaesarTests\\Encrypt\\multiLineOutputTest.txt", @"Mpsfn!jqtvn!epmps!tju!bnfu-!dpotfdufuvs!bejqjtdjoh!fmju/!Wjwbnvt!wjubf!hsbwjeb!qvsvt/!Ovod!rvjt!ovod!ufmmvt/!Dsbt!mbpsffu!dpohvf!vsob-!tfe!cjcfoevn!gfmjt!ujodjevou!wfm/!Epofd!vu!kvtup!tbqjfo/!Nbfdfobt!wfm!mjhvmb!pejp/!Tvtqfoejttf!fojn!ejbn-!nbmftvbeb!vu!wfmju!ofd-!gfvhjbu!fhftubt!uvsqjt/!Gvtdf!opo!gbdjmjtjt!ojci-!fv!ujodjevou!nj/!Bfofbo!dpowbmmjt!pejp!fvjtnpe-!ebqjcvt!vsob!ufnqps-!qsfujvn!mjcfsp/!Qsbftfou!qvmwjobs-!ojci!fu!wpmvuqbu!wbsjvt-!gfmjt!tfn!vmusjdjft!ojci-!tju!bnfu!sipodvt!fmju!mpsfn!tju!bnfu!mfp/!Gvtdf!tfe!qpsuujups!mjhvmb/!Qfmmfouftrvf!vu!ejduvn!ejbn/!Nbfdfobt!bddvntbo!mjhvmb!bsdv-!ofd!cjcfoevn!sjtvt!gjojcvt!tfe/", ((string[])(null)));
#line hidden
        }
        
        public virtual void DecryptionOfMulti_LineText(string inputPath, string outputPath, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "decrypt"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Decryption of multi-line text", @__tags);
#line 54
this.ScenarioSetup(scenarioInfo);
#line 55
 testRunner.Given(string.Format("A file is located at {0}", inputPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 56
 testRunner.And(@"the file contains MptuEftpmbuf!boe!mpofBmm!ojhiu!mpoh!po!uif!mblfXifsf!gph!usbjmt!boe!njtu!dsffqt-Uif!xijtumf!pg!b!cpbuDbmmt!boe!dsjft!vofoejohmz-Mjlf!tpnf!mptu!dijmeJo!ufbst!boe!uspvcmfIvoujoh!uif!ibscps(t!csfbtuBoe!uif!ibscps(t!fzft/Dbsm!Tboecvsh-!2989!.!2:78", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 57
 testRunner.When(string.Format("decrypted with CaesarPlus to {0}", outputPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 58
 testRunner.Then(string.Format("the text in the {0} should be:", outputPath), @"Lost

Desolate and lone
All night long on the lake
Where fog trails and mist creeps,
The whistle of a boat
Calls and cries unendingly,
Like some lost child
In tears and trouble
Hunting the harbor's breast
And the harbor's eyes.

Carl Sandburg, 1878 - 1967", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Decryption of multi-line text: C:\\Temp\\CaesarTests\\Decrypt\\multiLineInputTest.txt" +
            "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CaesarPlus")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("decrypt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "C:\\Temp\\CaesarTests\\Decrypt\\multiLineInputTest.txt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:inputPath", "C:\\Temp\\CaesarTests\\Decrypt\\multiLineInputTest.txt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:outputPath", "C:\\Temp\\CaesarTests\\Decrypt\\multiLineOutputTest.txt")]
        public virtual void DecryptionOfMulti_LineText_CTempCaesarTestsDecryptMultiLineInputTest_Txt()
        {
            this.DecryptionOfMulti_LineText("C:\\Temp\\CaesarTests\\Decrypt\\multiLineInputTest.txt", "C:\\Temp\\CaesarTests\\Decrypt\\multiLineOutputTest.txt", ((string[])(null)));
#line hidden
        }
    }
}
#pragma warning restore
#endregion
